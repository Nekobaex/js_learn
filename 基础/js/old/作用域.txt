说明:
    默认使用 'use strict'
    默认使用 let, const, 不使用 var

底层原理:
    Local       : 本地作用域 (将 Block 包括进来)
    Global      : 全局作用域, 即变量 globalThis, 类似标准库, 它的值可以不加 globalThis. 被直接访问, 但全局声明的变量不在 GlobalThis 中
    Closure     : 闭包函数的作用域

    // 不常用
    Block       : 块作用域, 历史遗留
    Catch Block : catch 语句中的作用域, 用来处理错误
    Eval        : eval 函数执行时的作用域,
    With Block  : with 语句的作用域

Local (本地作用域)
    概念:
        最基础的作用域, 
        所有作用域的基础

    范围: 
        最外层声明的变量,
        只由 大括号划分的不同层级
        一般的函数 (不包括闭包) 的大括号内
        流程控制 (if...else, while, for) 的大括号内

    功能:
        (1) 作用域是父子层级
            子层级可以访问夫层级的变量,
            返过来则不行, 即夫层级无法访问子层级

        (2) 作用域分隔
            不同层级的作用域由 大括号 分隔

        (3) 变量遮蔽
            即在不同层级可以重复使用 let, const 声明变量,
            同层级不可

        (4) 函数内的作用域
            在声明时确定好作用域, 
            但每次执行完毕时, 内部会被重置为执行前的状态

        (5) 循环内的作用域
            和函数内的作用域类似,
            每次执行时确定好作用域,
            但每轮循环结束时,内部会被重置为刚开始执行的状态

    示例:
        (1) 父子层级
            let a = 1
            {
                let b = 2
                console.log(a)
                console.log(b)
                // 输出:
                // 1
                // 2
            }
            console.log(a) // 1
            console.log(b) // 报错, 父级作用域无法访问子作用域的变量

        (2) 作用域分隔:
            let a = 1
            {
                {
                    let c = 3
                    {{
                        let e = 5
                    }}
                }
                let b = 2
            }
            let d = 4

        (3) 变量遮蔽:
            // 正确实例
            let a = 1
            const b = 1
            {
                let a = 2
                const b = 2
            }

            // 错误示例
            let c = 1
            let c = 2
            {
                const d = 3
                const d = 4
            }

        (4) 函数内的作用域
            let num = 111
            function foo() {
                let num = 222
                num = num + 111
                console.log(num)
            }
            foo() // 333

            {
                let num = 444
                foo() // 333
            }

        (5) 循环中的作用域
            let a = 1
            while (a < 4) {
                let b = 1
                a ++
                b ++
                console.log(`a: ${a}`)
                console.log(`b: ${b}`)
            }
            // 输出:
            // a: 2
            // b: 2
            // a: 3
            // b: 2
            // a: 4
            // b: 2
            
Global (全局作用域)
    概念:
        全局都可直接访问的作用域, 即 globalThis 对象,
        相当于基本保障, 或最外层的父级作用域,
        别名有: window (浏览器中), global (nodeJS 中)

    范围:
        globalThis 的成员

    功能:
        (1) globalThis
            类似其它语言标准库,
            可不加 globalThis. 直接访问子字段, 相当于全局声明的变量,
            但全局声明的变量, 不在它之中,
            内部子字段可修改,
            

    示例:
        (1)
            globalThis.name = 'neko'
            console.log(name) // neko

            function foo() {
                console.log(name)
            }
            foo() // neko


            let age = 2
            console.log(age)
            console.log(globalThis.age)
            // 输出:
            // 2
            // undefined

Closure (闭包作用域)
    概念:
        将一个函数 return 到外部,
        则它根据需要, 保存父级甚至更上层级的作用域,
        但也只保存它所需要的变量

    范围:
        闭包函数执行时的作用域

    功能:
        (1) 保存父级作用域
            闭包的 "函数部分"作用域和一般函数一样,每执行一次都会重置, 
            但对于它保存的"父级"作用域, 会一直留存下来

    示例:
        (1)
            function foo(){
                let a = 1
                function bar(){
                    let b = 1
                    a ++
                    b ++
                    console.log(a)
                    console.log(b)
                }

                return bar
            }
            let barClosure = foo()
            barClosure()
            // 输出:
            // 2
            // 2

            barClosure()
            // 输出:
            // 3
            // 2

            barClosure()
            // 输出:
            // 4
            // 2

不常用作用域:
    Block (块作用域)
        概念:
            基本等同于 Local,
            但由于 var 等历史遗留的问题, 
            将它保留了下来

        范围:
            只由 大括号划分的不同层级,
            流程控制 (if...else, while, for) 的大括号内

        功能:
            (1) var 变量的提升:
                在块级作用域中, 
                var 声明的变量, 
                会被提升到外层第一个 非块作用域
        
        示例:
            (1) var 变量的提升
                // 若为 let, const 则行不通
                {
                    var a = 111
                    {
                        var b = 222
                    }
                }
                console.log(a)
                console.log(b)
                // 输出:
                // 111
                // 222

                // 函数内由于是正常的 Local 作用域, 
                // 故不存在此现象
                function foo() {
                    var a = 111
                    console.log(a)
                }
                foo() // 111
                console.log(a) // 报错

    Catch Block
        概念:
            catch 语句后大括号内部的作用域,
            一般用来错误处理,
            实际上和 Local 作用域类似
    Eval
        概念: 
            由于字符串解析的不确定性, 
            所以为了确保正确, 浏览器会和闭包一样, 
            给他备份庞大的父级和以上层级的作用域

    With Block 
        概念:
            with 语句中的作用域


    

参考链接:
https://developer.mozilla.org/zh-CN/docs/Glossary/Scope
https://juejin.cn/post/7175125949053632549